function u0:0(r64, i64) -> r64, i64 system_v {
    gv0 = symbol u1:0
    gv1 = symbol u1:1
    sig0 = (r64, i64) -> r64, i64 system_v
    sig1 = (i64, i32, i32, i64) system_v
    fn0 = u0:1 sig0
    fn1 = u0:2 sig1

block0(v0: r64, v1: i64):
    v3 = iconst.i64 0
    v25 -> v3
    v4 = symbol_value.i64 gv0
    v5 = load.r64 notrap aligned v1
    v38 = iconst.i64 8
    v42 -> v38
    v7 = load.r64 notrap aligned v0+48
    v8 = load.r64 notrap aligned v0+40
    v9 = iconst.i64 1
    v10 -> v9
    v11 = symbol_value.i64 gv1
    v39 = iconst.i64 -32
    v12 = iadd v1, v39
    store notrap aligned v7, v12
    store notrap aligned v5, v12+8
    store notrap aligned v11, v12+16
    store notrap aligned v9, v12+24
    store notrap aligned v9, v12+32
    store notrap aligned v12, v4+152
    v13, v14 = call fn0(v8, v9)
    v31 -> v13
    v15 = load.i64 notrap aligned v4+152
    v34 -> v15
    v16 = load.r64 notrap aligned v0+32
    v36 -> v16
    v17 = load.r64 notrap aligned v0+24
    v30 -> v17
    v18 = load.i64 notrap aligned v4
    v40 = iconst.i64 -24
    v43 -> v40
    v19 = iadd v18, v40
    store notrap aligned v19, v4
    v20 = load.i64 notrap aligned v4+8
    v41 = icmp uge v19, v20
    brnz v41, block3(v19)
    jump block2

block2:
    v22 = iconst.i64 2
    v23 = iconst.i32 17
    v24 = iconst.i32 1
    call fn1(v22, v23, v24, v3)
    v26 = load.i64 notrap aligned v4
    jump block3(v26)

block3(v21: i64):
    v27 = iconst.i64 2052
    store notrap aligned v27, v21
    v28 = iadd v21, v38
    v29 = raw_bitcast.r64 v28
    store.r64 notrap aligned v17, v29
    store.r64 notrap aligned v13, v29+8
    v32 = load.r64 notrap aligned v0+16
    v33 = load.r64 notrap aligned v0+8
    v35 = iadd.i64 v15, v40
    store notrap aligned v32, v35
    store notrap aligned v29, v35+8
    store.r64 notrap aligned v16, v35+16
    v37 = iconst.i64 3
    jump block1

block1:
    store.i64 notrap aligned v35, v4+152
    return v33, v37
}
