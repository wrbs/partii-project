function u0:0(r64, r64) -> r64, i64 system_v {
    gv0 = symbol u1:0
    gv1 = symbol u1:1
    sig0 = (r64, i64) -> r64, i64 system_v
    sig1 = (i64, i32, i32, i64) system_v
    fn0 = u0:1 sig0
    fn1 = u0:2 sig1

block0(v0: r64, v1: r64):
    v2 = null.r64 
    v3 = iconst.i64 0
    v4 = symbol_value.i64 gv0
    v5 = load.i64 notrap aligned v4+152
    v6 = load.r64 notrap aligned v0+48
    v7 = load.r64 notrap aligned v0+40
    v8 = iconst.i64 1
    v9 = iconst.i64 1
    v10 = symbol_value.i64 gv1
    store notrap aligned v5, v4+152
    v11 = iadd_imm v5, -40
    store notrap aligned v6, v11
    store notrap aligned v1, v11+8
    store notrap aligned v10, v11+16
    store notrap aligned v9, v11+24
    store notrap aligned v9, v11+32
    v12, v13 = call fn0(v7, v8)
    v14 = load.i64 notrap aligned v4+152
    v31 -> v14
    v15 = load.r64 notrap aligned v0+32
    v33 -> v15
    v16 = load.r64 notrap aligned v0+24
    v17 = load.i64 notrap aligned v4
    v18 = iadd_imm v17, -24
    store notrap aligned v18, v4
    v19 = load.i64 notrap aligned v4+8
    br_icmp ult v18, v19, block2
    jump block3(v18)

block2:
    v21 = iconst.i64 2
    v22 = iconst.i32 17
    v23 = iconst.i32 1
    v24 = iconst.i64 0
    call fn1(v21, v22, v23, v24)
    v25 = load.i64 notrap aligned v4
    jump block3(v25)

block3(v20: i64):
    v26 = iconst.i64 2052
    store notrap aligned v26, v20
    v27 = iadd_imm v20, 8
    v28 = raw_bitcast.r64 v27
    store.r64 notrap aligned v16, v28
    store.r64 notrap aligned v12, v28+8
    v29 = load.r64 notrap aligned v0+16
    v30 = load.r64 notrap aligned v0+8
    v32 = iadd_imm.i64 v14, -24
    store notrap aligned v29, v32
    store notrap aligned v28, v32+8
    store.r64 notrap aligned v15, v32+16
    v34 = iconst.i64 3
    jump block1

block1:
    store.i64 notrap aligned v32, v4+152
    return v30, v34
}
