VCode_ShowWithRRU {{
  Entry block: 0
Block 0:
  (original IR block: block0)
  (successor: Block 1)
  (instruction range: 0 .. 116)
  Inst 0:   pushq   %rbp
  Inst 1:   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
  Inst 2:   movq    %rsp, %rbp
  Inst 3:   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 48 }
  Inst 4:   subq    $96, %rsp
  Inst 5:   movq    %r12, 48(%rsp)
  Inst 6:   unwind SaveReg { clobber_offset: 0, reg: r25J }
  Inst 7:   movq    %r13, 56(%rsp)
  Inst 8:   unwind SaveReg { clobber_offset: 8, reg: r26J }
  Inst 9:   movq    %r14, 64(%rsp)
  Inst 10:   unwind SaveReg { clobber_offset: 16, reg: r27J }
  Inst 11:   movq    %rbx, 72(%rsp)
  Inst 12:   unwind SaveReg { clobber_offset: 24, reg: r28J }
  Inst 13:   movq    %r15, 80(%rsp)
  Inst 14:   unwind SaveReg { clobber_offset: 32, reg: r29J }
  Inst 15:   movq    %rdi, %r13
  Inst 16:   load_ext_name u1:0+0, %r12
  Inst 17:   movq    152(%r12), %rsi
  Inst 18:   movl    $1, %edi
  Inst 19:   movq    %rdi, rsp(0 + virtual offset)
  Inst 20:   movq    8(%r13), %rdi
  Inst 21:   load_ext_name u1:1+0, %r15
  Inst 22:   movq    %rsi, 152(%r12)
  Inst 23:   movq    rsp(0 + virtual offset), %rax
  Inst 24:   movq    %rax, -32(%rsi)
  Inst 25:   movq    %r15, -24(%rsi)
  Inst 26:   movl    $1, %eax
  Inst 27:   movq    %rax, -16(%rsi)
  Inst 28:   movl    $1, %eax
  Inst 29:   movq    %rax, -8(%rsi)
  Inst 30:   xorq    %rsi, %rsi
  Inst 31:   load_ext_name u0:1+0, %rax
  Inst 32:   movq    %rdi, rsp(8 + virtual offset)
  Inst 33:   movq    %r13, rsp(16 + virtual offset)
      (safepoint: slots [S0, S1, S2] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 34:   call    *%rax
  Inst 35:   movq    rsp(16 + virtual offset), %r13
  Inst 36:   movq    152(%r12), %rsi
  Inst 37:   movl    $3, %edi
  Inst 38:   movq    %rdi, rsp(8 + virtual offset)
  Inst 39:   movq    16(%r13), %rdi
  Inst 40:   movq    %rsi, 152(%r12)
  Inst 41:   movq    rsp(0 + virtual offset), %rax
  Inst 42:   movq    %rax, -40(%rsi)
  Inst 43:   movq    rsp(8 + virtual offset), %rax
  Inst 44:   movq    %rax, -32(%rsi)
  Inst 45:   movq    %r15, -24(%rsi)
  Inst 46:   movl    $1, %eax
  Inst 47:   movq    %rax, -16(%rsi)
  Inst 48:   movl    $1, %eax
  Inst 49:   movq    %rax, -8(%rsi)
  Inst 50:   movl    $1, %esi
  Inst 51:   load_ext_name u0:1+0, %rax
  Inst 52:   movq    %rdi, rsp(16 + virtual offset)
  Inst 53:   movq    %r13, rsp(24 + virtual offset)
      (safepoint: slots [S0, S1, S2, S3] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 54:   call    *%rax
  Inst 55:   movq    rsp(24 + virtual offset), %r13
  Inst 56:   movq    152(%r12), %rsi
  Inst 57:   movl    $5, %r14d
  Inst 58:   movq    24(%r13), %rdi
  Inst 59:   movq    %rsi, 152(%r12)
  Inst 60:   movq    rsp(0 + virtual offset), %rax
  Inst 61:   movq    %rax, -48(%rsi)
  Inst 62:   movq    rsp(8 + virtual offset), %rax
  Inst 63:   movq    %rax, -40(%rsi)
  Inst 64:   movq    %r14, -32(%rsi)
  Inst 65:   movq    %r15, -24(%rsi)
  Inst 66:   movl    $1, %eax
  Inst 67:   movq    %rax, -16(%rsi)
  Inst 68:   movl    $1, %eax
  Inst 69:   movq    %rax, -8(%rsi)
  Inst 70:   movl    $2, %esi
  Inst 71:   load_ext_name u0:1+0, %rax
  Inst 72:   movq    %rdi, rsp(16 + virtual offset)
  Inst 73:   movq    %r13, rsp(24 + virtual offset)
  Inst 74:   movq    %r14, rsp(32 + virtual offset)
      (safepoint: slots [S0, S1, S2, S3, S4] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 75:   call    *%rax
  Inst 76:   movq    rsp(24 + virtual offset), %r13
  Inst 77:   movq    rsp(32 + virtual offset), %r14
  Inst 78:   movq    152(%r12), %rsi
  Inst 79:   movl    $7, %ebx
  Inst 80:   movq    32(%r13), %rdi
  Inst 81:   movq    %rsi, 152(%r12)
  Inst 82:   movq    rsp(0 + virtual offset), %rax
  Inst 83:   movq    %rax, -56(%rsi)
  Inst 84:   movq    rsp(8 + virtual offset), %rax
  Inst 85:   movq    %rax, -48(%rsi)
  Inst 86:   movq    %r14, -40(%rsi)
  Inst 87:   movq    %rbx, -32(%rsi)
  Inst 88:   movq    %r15, -24(%rsi)
  Inst 89:   movl    $1, %eax
  Inst 90:   movq    %rax, -16(%rsi)
  Inst 91:   movl    $1, %eax
  Inst 92:   movq    %rax, -8(%rsi)
  Inst 93:   movl    $3, %esi
  Inst 94:   load_ext_name u0:1+0, %rax
  Inst 95:   movq    %r13, rsp(16 + virtual offset)
  Inst 96:   movq    %rbx, rsp(24 + virtual offset)
  Inst 97:   movq    %rdi, rsp(32 + virtual offset)
  Inst 98:   movq    %r14, rsp(40 + virtual offset)
      (safepoint: slots [S0, S1, S2, S3, S4, S5] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 99:   call    *%rax
  Inst 100:   movq    rsp(24 + virtual offset), %rbx
  Inst 101:   movq    rsp(16 + virtual offset), %r13
  Inst 102:   movq    rsp(40 + virtual offset), %r14
  Inst 103:   movq    152(%r12), %rsi
  Inst 104:   movl    $9, %eax
  Inst 105:   movq    40(%r13), %rdi
  Inst 106:   movq    %rsi, %rcx
  Inst 107:   addq    $-40, %rcx
  Inst 108:   movq    rsp(0 + virtual offset), %rdx
  Inst 109:   movq    %rdx, -40(%rsi)
  Inst 110:   movq    rsp(8 + virtual offset), %rdx
  Inst 111:   movq    %rdx, -32(%rsi)
  Inst 112:   movq    %r14, -24(%rsi)
  Inst 113:   movq    %rbx, -16(%rsi)
  Inst 114:   movq    %rax, -8(%rsi)
  Inst 115:   jmp     label1
Block 1:
  (original IR block: block1)
  (instruction range: 116 .. 128)
  Inst 116:   movq    %rcx, 152(%r12)
  Inst 117:   movl    $5, %edx
  Inst 118:   movq    %rdi, %rax
  Inst 119:   movq    48(%rsp), %r12
  Inst 120:   movq    56(%rsp), %r13
  Inst 121:   movq    64(%rsp), %r14
  Inst 122:   movq    72(%rsp), %rbx
  Inst 123:   movq    80(%rsp), %r15
  Inst 124:   addq    $96, %rsp
  Inst 125:   movq    %rbp, %rsp
  Inst 126:   popq    %rbp
  Inst 127:   ret
}}
