
<input>:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <stdlib_min>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 40          	sub    $0x40,%rsp
   8:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
   d:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
  12:	4c 89 74 24 30       	mov    %r14,0x30(%rsp)
  17:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  1c:	49 89 d4             	mov    %rdx,%r12
  1f:	4c 8b 2e             	mov    (%rsi),%r13
  22:	4c 8b 76 08          	mov    0x8(%rsi),%r14
  26:	48 83 c6 10          	add    $0x10,%rsi
  2a:	48 bb 00 00 00 00 00 	movabs $0x0,%rbx
  31:	00 00 00 
			2c: R_X86_64_64	ocaml_extern_sp
  34:	48 89 33             	mov    %rsi,(%rbx)
  37:	4c 89 ef             	mov    %r13,%rdi
  3a:	4c 89 f6             	mov    %r14,%rsi
  3d:	48 b8 00 00 00 00 00 	movabs $0x0,%rax
  44:	00 00 00 
			3f: R_X86_64_64	oc_prim233
  47:	48 89 34 24          	mov    %rsi,(%rsp)
  4b:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  50:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  55:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
  5a:	ff d0                	call   *%rax
  5c:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  61:	4c 8b 74 24 18       	mov    0x18(%rsp),%r14
  66:	48 8b 33             	mov    (%rbx),%rsi
  69:	bf 01 00 00 00       	mov    $0x1,%edi
  6e:	48 39 f8             	cmp    %rdi,%rax
  71:	0f 84 03 00 00 00    	je     7a <stdlib_min+0x7a>
  77:	4d 89 ee             	mov    %r13,%r14
  7a:	49 89 34 24          	mov    %rsi,(%r12)
  7e:	48 31 d2             	xor    %rdx,%rdx
  81:	4c 89 f0             	mov    %r14,%rax
  84:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
  89:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
  8e:	4c 8b 74 24 30       	mov    0x30(%rsp),%r14
  93:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
  98:	48 83 c4 40          	add    $0x40,%rsp
  9c:	48 89 ec             	mov    %rbp,%rsp
  9f:	5d                   	pop    %rbp
  a0:	c3                   	ret    
