function u0:0(r64, r64, r64, r64) -> r64, i64 system_v {
    gv0 = symbol u1:0
    gv1 = symbol u1:1
    sig0 = (i64, i32, i32, i64) system_v
    fn0 = u0:1 sig0

block0(v0: r64, v1: r64, v2: r64, v3: r64):
    v5 = iconst.i64 0
    v18 -> v5
    v6 = symbol_value.i64 gv0
    v7 = load.i64 notrap aligned v6+152
    v29 -> v7
    v8 = load.r64 notrap aligned v3
    v32 -> v8
    v9 = iconst.i64 1
    v10 = raw_bitcast.r64 v9
    v31 -> v10
    v11 = load.i64 notrap aligned v6
    v34 = iconst.i64 -32
    v12 = iadd v11, v34
    store notrap aligned v12, v6
    v13 = load.i64 notrap aligned v6+8
    v35 = icmp uge v12, v13
    brnz v35, block3(v12)
    jump block2

block2:
    v15 = iconst.i64 3
    v16 = iconst.i32 17
    v17 = iconst.i32 1
    call fn0(v15, v16, v17, v5)
    v19 = load.i64 notrap aligned v6
    jump block3(v19)

block3(v14: i64):
    v20 = iconst.i64 3319
    store notrap aligned v20, v14
    v36 = iconst.i64 8
    v21 = iadd v14, v36
    v22 = raw_bitcast.r64 v21
    store.r64 notrap aligned v1, v22+8
    store.r64 notrap aligned v2, v22+16
    v23 = raw_bitcast.i64 v22
    v24 = iconst.i64 0xdead_beef
    store notrap aligned v24, v23
    v25 = symbol_value.i64 gv1
    v26 = load.i64 notrap aligned v25
    v27 = load.r64 notrap aligned v26+2384
    v28 = load.r64 notrap aligned v27+48
    v37 = iconst.i64 -24
    v30 = iadd.i64 v7, v37
    store notrap aligned v22, v30
    store.r64 notrap aligned v10, v30+8
    store.r64 notrap aligned v8, v30+16
    v33 = iconst.i64 3
    jump block1

block1:
    store.i64 notrap aligned v30, v6+152
    return v28, v33
}
