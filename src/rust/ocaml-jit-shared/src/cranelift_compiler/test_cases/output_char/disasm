VCode_ShowWithRRU {{
  Entry block: 0
Block 0:
  (original IR block: block0)
  (successor: Block 1)
  (instruction range: 0 .. 22)
  Inst 0:   pushq   %rbp
  Inst 1:   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
  Inst 2:   movq    %rsp, %rbp
  Inst 3:   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 16 }
  Inst 4:   subq    $32, %rsp
  Inst 5:   movq    %r12, 16(%rsp)
  Inst 6:   unwind SaveReg { clobber_offset: 0, reg: r25J }
  Inst 7:   movq    %r13, 24(%rsp)
  Inst 8:   unwind SaveReg { clobber_offset: 8, reg: r26J }
  Inst 9:   movq    %rdx, %r12
  Inst 10:   movq    0(%rsi), %rdi
  Inst 11:   movq    8(%rsi), %rax
  Inst 12:   addq    $16, %rsi
  Inst 13:   load_ext_name u1:0+0, %r13
  Inst 14:   movq    %rsi, 0(%r13)
  Inst 15:   movq    %rax, %rsi
  Inst 16:   load_ext_name u0:1+0, %rax
  Inst 17:   movq    %rsi, rsp(0 + virtual offset)
  Inst 18:   movq    %rdi, rsp(8 + virtual offset)
      (safepoint: slots [S0, S1] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 19:   call    *%rax
  Inst 20:   movq    0(%r13), %rsi
  Inst 21:   jmp     label1
Block 1:
  (original IR block: block1)
  (instruction range: 22 .. 30)
  Inst 22:   movq    %rsi, 0(%r12)
  Inst 23:   xorq    %rdx, %rdx
  Inst 24:   movq    16(%rsp), %r12
  Inst 25:   movq    24(%rsp), %r13
  Inst 26:   addq    $32, %rsp
  Inst 27:   movq    %rbp, %rsp
  Inst 28:   popq    %rbp
  Inst 29:   ret
}}
