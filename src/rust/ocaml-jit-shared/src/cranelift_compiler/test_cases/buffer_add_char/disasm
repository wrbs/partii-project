VCode_ShowWithRRU {{
  Entry block: 0
Block 0:
  (original IR block: block0)
  (successor: Block 1)
  (successor: Block 2)
  (instruction range: 0 .. 32)
  Inst 0:   pushq   %rbp
  Inst 1:   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
  Inst 2:   movq    %rsp, %rbp
  Inst 3:   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 48 }
  Inst 4:   subq    $96, %rsp
  Inst 5:   movq    %r12, 48(%rsp)
  Inst 6:   unwind SaveReg { clobber_offset: 0, reg: r25J }
  Inst 7:   movq    %r13, 56(%rsp)
  Inst 8:   unwind SaveReg { clobber_offset: 8, reg: r26J }
  Inst 9:   movq    %r14, 64(%rsp)
  Inst 10:   unwind SaveReg { clobber_offset: 16, reg: r27J }
  Inst 11:   movq    %rbx, 72(%rsp)
  Inst 12:   unwind SaveReg { clobber_offset: 24, reg: r28J }
  Inst 13:   movq    %r15, 80(%rsp)
  Inst 14:   unwind SaveReg { clobber_offset: 32, reg: r29J }
  Inst 15:   movq    %rsi, rsp(16 + virtual offset)
  Inst 16:   movq    %rdx, %rsi
  Inst 17:   movq    %rsi, rsp(0 + virtual offset)
  Inst 18:   load_ext_name u1:0+0, %r14
  Inst 19:   movl    $3, %edx
  Inst 20:   movq    8(%rdi), %rdi
  Inst 21:   movq    rsp(16 + virtual offset), %rsi
  Inst 22:   load_ext_name u0:1+0, %rax
  Inst 23:   movq    %rsi, rsp(8 + virtual offset)
  Inst 24:   movq    %rdi, rsp(24 + virtual offset)
  Inst 25:   movq    %rdx, rsp(32 + virtual offset)
      (safepoint: slots [S0, S1, S2, S3, S4] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 26:   call    *%rax
  Inst 27:   movq    %rax, %rsi
  Inst 28:   movq    %rsi, rsp(8 + virtual offset)
  Inst 29:   movq    %rdx, %r15
  Inst 30:   testq   %r15, %r15
  Inst 31:   jz      label1; j label2
Block 1:
  (successor: Block 4)
  (instruction range: 32 .. 34)
  Inst 32:   movq    rsp(8 + virtual offset), %rsi
  Inst 33:   jmp     label4
Block 2:
  (original IR block: block3)
  (successor: Block 3)
  (instruction range: 34 .. 60)
  Inst 34:   movq    152(%r14), %rbx
  Inst 35:   movq    %r15, %r13
  Inst 36:   addq    $-1, %r13
  Inst 37:   movq    %r15, %rdx
  Inst 38:   shlq    $3, %rdx
  Inst 39:   movq    %rbx, %r12
  Inst 40:   addq    %rdx, %r12
  Inst 41:   movq    %rbx, %rdi
  Inst 42:   addq    $-24, %rdi
  Inst 43:   movq    %rbx, %rsi
  Inst 44:   load_ext_name %Memmove+0, %rax
      (safepoint: slots [S0, S1, S2] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 45:   call    *%rax
  Inst 46:   load_ext_name u1:1+0, %rsi
  Inst 47:   movl    $1, %edi
  Inst 48:   movq    %rdi, -8(%rbx,%r15,8)
  Inst 49:   movl    $1, %edi
  Inst 50:   movq    %rdi, -16(%rbx,%r15,8)
  Inst 51:   movq    %rsi, -24(%rbx,%r15,8)
  Inst 52:   movq    %r12, 152(%r14)
  Inst 53:   movq    rsp(8 + virtual offset), %rsi
  Inst 54:   movq    %rsi, %rdi
  Inst 55:   movq    %r13, %rsi
  Inst 56:   load_ext_name u0:2+0, %rax
  Inst 57:   movq    %rdi, rsp(8 + virtual offset)
      (safepoint: slots [S0, S1, S2] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 58:   call    *%rax
  Inst 59:   jmp     label3
Block 3:
  (successor: Block 4)
  (instruction range: 60 .. 61)
  Inst 60:   jmp     label4
Block 4:
  (original IR block: block2)
  (successor: Block 5)
  (instruction range: 61 .. 82)
  Inst 61:   movq    rsp(16 + virtual offset), %rsi
  Inst 62:   movq    0(%rsi), %rsi
  Inst 63:   movq    rsp(16 + virtual offset), %rdi
  Inst 64:   movq    8(%rdi), %rdi
  Inst 65:   movq    rsp(0 + virtual offset), %rax
  Inst 66:   movq    %rax, %rdx
  Inst 67:   load_ext_name u0:3+0, %rax
  Inst 68:   movq    %rsi, rsp(0 + virtual offset)
  Inst 69:   movq    %rdi, rsp(8 + virtual offset)
  Inst 70:   movq    %rdx, rsp(24 + virtual offset)
      (safepoint: slots [S0, S1, S2, S3] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 71:   call    *%rax
  Inst 72:   movq    rsp(16 + virtual offset), %rsi
  Inst 73:   movq    0(%rsi), %rsi
  Inst 74:   addq    $2, %rsi
  Inst 75:   movq    rsp(16 + virtual offset), %rdi
  Inst 76:   load_ext_name u0:4+0, %rax
  Inst 77:   movq    %rsi, rsp(0 + virtual offset)
  Inst 78:   movq    %rdi, rsp(8 + virtual offset)
      (safepoint: slots [S0, S1] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 79:   call    *%rax
  Inst 80:   movl    $1, %eax
  Inst 81:   jmp     label5
Block 5:
  (original IR block: block1)
  (instruction range: 82 .. 92)
  Inst 82:   xorq    %rdx, %rdx
  Inst 83:   movq    48(%rsp), %r12
  Inst 84:   movq    56(%rsp), %r13
  Inst 85:   movq    64(%rsp), %r14
  Inst 86:   movq    72(%rsp), %rbx
  Inst 87:   movq    80(%rsp), %r15
  Inst 88:   addq    $96, %rsp
  Inst 89:   movq    %rbp, %rsp
  Inst 90:   popq    %rbp
  Inst 91:   ret
}}
