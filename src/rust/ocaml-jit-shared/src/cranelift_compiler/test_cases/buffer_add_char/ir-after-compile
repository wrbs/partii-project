function u0:0(r64, i64) -> r64, i64 system_v {
    gv0 = symbol u1:0
    gv1 = symbol u1:1
    sig0 = (r64, i64) -> r64, i64 system_v
    sig1 = (r64, r64, r64) -> r64 system_v
    sig2 = (i64, r64) system_v
    fn0 = u0:1 sig0
    fn1 = u0:2 sig1
    fn2 = u0:3 sig2

block0(v0: r64, v1: i64):
    v3 = iconst.i64 0
    v4 = symbol_value.i64 gv0
    v5 = load.r64 notrap aligned v1
    v6 = load.r64 notrap aligned v1+8
    v29 = iconst.i64 16
    v7 = iadd v1, v29
    v8 = iconst.i64 3
    v9 = raw_bitcast.r64 v8
    v10 = load.r64 notrap aligned v0+8
    v11 = iconst.i64 1
    v12 -> v11
    v27 -> v11
    v13 = symbol_value.i64 gv1
    store notrap aligned v7, v4+152
    v30 = iconst.i64 -24
    v14 = iadd v1, v30
    store notrap aligned v5, v14
    store notrap aligned v9, v14+8
    store notrap aligned v13, v14+16
    store notrap aligned v11, v14+24
    store notrap aligned v11, v14+32
    v15, v16 = call fn0(v10, v11)
    v17 = load.i64 notrap aligned v4+152
    v18 = load.r64 notrap aligned v5
    v19 = load.r64 notrap aligned v5+8
    store notrap aligned v17, v4+152
    v20 = call fn1(v19, v18, v6)
    v21 = load.i64 notrap aligned v4+152
    v22 = load.r64 notrap aligned v5
    v23 = raw_bitcast.i64 v22
    v31 = iconst.i64 2
    v24 = iadd v23, v31
    v25 = raw_bitcast.r64 v24
    v26 = raw_bitcast.i64 v5
    call fn2(v26, v25)
    v28 = raw_bitcast.r64 v11
    jump block1

block1:
    store.i64 notrap aligned v21, v4+152
    return v28, v3
}
