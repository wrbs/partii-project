function u0:0(r64, i64) -> r64, i64 system_v {
    gv0 = symbol u1:0
    gv1 = symbol u1:1
    sig0 = (r64, i64) -> r64, i64 system_v
    fn0 = u0:1 sig0

block0(v0: r64, v1: i64):
    v2 = null.r64 
    v3 = iconst.i64 0
    v4 = symbol_value.i64 gv0
    v5 = load.r64 notrap aligned v1
    v6 = load.r64 notrap aligned v1+8
    v7 = iadd_imm v1, 16
    v8 = raw_bitcast.i64 v6
    v9 = icmp_imm eq v8, 1
    brz v9, block1
    jump block2

block1:
    v10 = load.r64 notrap aligned v6+8
    v11 = load.r64 notrap aligned v6
    v12 = iconst.i64 0
    v13 = iconst.i64 1
    v14 = symbol_value.i64 gv1
    store.i64 notrap aligned v7, v4+152
    v15 = iadd_imm.i64 v7, -32
    store notrap aligned v11, v15
    store notrap aligned v14, v15+8
    store notrap aligned v13, v15+16
    store notrap aligned v13, v15+24
    v16, v17 = call fn0(v5, v12)
    v18 = load.i64 notrap aligned v4+152
    v19 = raw_bitcast.i64 v0
    v20 = iadd_imm v19, 0
    v21 = raw_bitcast.r64 v20
    v22 = iadd_imm v18, -16
    store.r64 notrap aligned v5, v22
    store notrap aligned v10, v22+8
    v23 = iconst.i64 2
    jump block3(v22, v21, v23)

block2:
    v24 = iconst.i64 1
    v25 = raw_bitcast.r64 v24
    jump block3(v7, v25, v3)

block3(v26: i64, v27: r64, v28: i64):
    store notrap aligned v26, v4+152
    return v27, v28
}
