function u0:0(r64, i64, i64) -> r64, i64 system_v {
    gv0 = symbol u1:0
    sig0 = (r64, i64, i64, i64) -> r64, i64 system_v
    fn0 = u0:1 sig0

block0(v0: r64, v1: i64, v2: i64):
    v3 = load.r64 notrap aligned v1
    v4 = load.r64 notrap aligned v1+8
    v28 = iconst.i64 16
    v5 = iadd v1, v28
    v7 = iconst.i64 0
    v12 -> v7
    v8 = raw_bitcast.i64 v4
    v29 = iconst.i64 1
    v13 -> v29
    v23 -> v29
    v9 = icmp eq v8, v29
    brnz v9, block2
    jump block1

block1:
    v10 = load.r64 notrap aligned v4+8
    v11 = load.r64 notrap aligned v4
    v14 = symbol_value.i64 gv0
    v30 = iconst.i64 -16
    v31 -> v30
    v15 = iadd.i64 v1, v30
    store notrap aligned v11, v15
    store notrap aligned v14, v15+8
    store.i64 notrap aligned v29, v15+16
    store.i64 notrap aligned v29, v15+24
    v16, v17 = call fn0(v3, v7, v2, v15)
    v18 = raw_bitcast.i64 v0
    v19 -> v18
    v20 = raw_bitcast.r64 v18
    v21 = iadd v17, v30
    store.r64 notrap aligned v3, v21
    store notrap aligned v10, v21+8
    v22 = iconst.i64 2
    jump block3(v21, v20, v22)

block2:
    v24 = raw_bitcast.r64 v29
    jump block3(v5, v24, v7)

block3(v25: i64, v26: r64, v27: i64):
    store notrap aligned v25, v2
    return v26, v27
}
