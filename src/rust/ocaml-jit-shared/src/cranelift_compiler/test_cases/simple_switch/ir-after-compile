function u0:0(r64, i64) -> r64, i64 system_v {
    gv0 = symbol u1:0
    jt0 = jump_table [block6, block5, block4]
    jt1 = jump_table [block3, block2, block1]

block0(v0: r64, v1: i64):
    v3 = iconst.i64 0
    v28 -> v3
    v4 = symbol_value.i64 gv0
    v5 = load.r64 notrap aligned v1
    v29 = iconst.i64 8
    v6 = iadd v1, v29
    v26 -> v6
    v7 = raw_bitcast.i64 v5
    v9 -> v7
    v30 = iconst.i64 1
    v24 -> v30
    v8 = band v7, v30
    brz v8, block9
    jump block8

block8:
    v10 = ireduce.i32 v7
    v31 = iconst.i32 1
    v11 = sshr v10, v31
    jump block11

block11:
    br_table.i32 v11, block10, jt0

block10:
    trap unreachable

block9:
    v12 = load.i8 notrap aligned v5-8
    v13 = uextend.i32 v12
    jump block13

block13:
    br_table.i32 v13, block12, jt1

block12:
    trap unreachable

block1:
    v14 = iconst.i64 11
    v15 = raw_bitcast.r64 v14
    jump block7(v15)

block2:
    v16 = iconst.i64 9
    v17 = raw_bitcast.r64 v16
    jump block7(v17)

block3:
    v18 = iconst.i64 7
    v19 = raw_bitcast.r64 v18
    jump block7(v19)

block4:
    v20 = iconst.i64 5
    v21 = raw_bitcast.r64 v20
    jump block7(v21)

block5:
    v22 = iconst.i64 3
    v23 = raw_bitcast.r64 v22
    jump block7(v23)

block6:
    v25 = raw_bitcast.r64 v30
    jump block7(v25)

block7(v27: r64):
    store.i64 notrap aligned v6, v4+152
    return v27, v3
}
