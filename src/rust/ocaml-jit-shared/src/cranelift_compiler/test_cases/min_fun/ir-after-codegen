function u0:0(r64, i64, i64) -> r64, i64 system_v {
    gv0 = symbol u1:0
    gv1 = symbol u1:1
    gv2 = symbol u1:2
    sig0 = (r64, i64, i64, i64) -> r64, i64 system_v
    fn0 = u0:1 sig0

block0(v0: r64, v1: i64, v2: i64):
    v3 = null.r64 
    v4 = iconst.i64 0
    v5 = symbol_value.i64 gv0
    v6 = load.r64 notrap aligned v1
    v7 = iadd_imm v1, 8
    v8 = load.r64 notrap aligned v6+8
    v9 = load.r64 notrap aligned v6
    v10 = symbol_value.i64 gv1
    v11 = load.i64 notrap aligned v10
    v12 = load.r64 notrap aligned v11+360
    v13 = load.r64 notrap aligned v12+120
    v14 = iconst.i64 1
    v15 = iconst.i64 1
    v16 = symbol_value.i64 gv2
    v17 = iadd_imm v7, -40
    store notrap aligned v9, v17
    store notrap aligned v8, v17+8
    store notrap aligned v16, v17+16
    store notrap aligned v15, v17+24
    store notrap aligned v15, v17+32
    v18, v19 = call fn0(v13, v14, v2, v17)
    v20 = symbol_value.i64 gv1
    v21 = load.i64 notrap aligned v20
    v22 = load.r64 notrap aligned v21+2528
    v23 = symbol_value.i64 gv1
    v24 = load.i64 notrap aligned v23
    v25 = load.r64 notrap aligned v24+2520
    v26 = load.r64 notrap aligned v25+8
    v27 = iadd_imm v19, -32
    store notrap aligned v22, v27
    store notrap aligned v9, v27+8
    store notrap aligned v8, v27+16
    store notrap aligned v18, v27+24
    v28 = iconst.i64 4
    jump block1

block1:
    store.i64 notrap aligned v27, v2
    return v26, v28
}
