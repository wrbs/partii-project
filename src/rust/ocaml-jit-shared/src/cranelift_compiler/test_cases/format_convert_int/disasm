VCode_ShowWithRRU {{
  Entry block: 0
Block 0:
  (original IR block: block0)
  (successor: Block 1)
  (instruction range: 0 .. 57)
  Inst 0:   pushq   %rbp
  Inst 1:   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
  Inst 2:   movq    %rsp, %rbp
  Inst 3:   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 32 }
  Inst 4:   subq    $64, %rsp
  Inst 5:   movq    %r12, 32(%rsp)
  Inst 6:   unwind SaveReg { clobber_offset: 0, reg: r25J }
  Inst 7:   movq    %r13, 40(%rsp)
  Inst 8:   unwind SaveReg { clobber_offset: 8, reg: r26J }
  Inst 9:   movq    %r14, 48(%rsp)
  Inst 10:   unwind SaveReg { clobber_offset: 16, reg: r27J }
  Inst 11:   movq    %rbx, 56(%rsp)
  Inst 12:   unwind SaveReg { clobber_offset: 24, reg: r28J }
  Inst 13:   movq    %rdi, %r13
  Inst 14:   load_ext_name u1:0+0, %r12
  Inst 15:   movq    0(%rsi), %r14
  Inst 16:   movq    8(%rsi), %rbx
  Inst 17:   movq    8(%r13), %rdi
  Inst 18:   load_ext_name u1:1+0, %rcx
  Inst 19:   movq    %rsi, %rax
  Inst 20:   addq    $-16, %rax
  Inst 21:   movq    %r14, -16(%rsi)
  Inst 22:   movq    %rcx, -8(%rsi)
  Inst 23:   movl    $1, %ecx
  Inst 24:   movq    %rcx, 0(%rsi)
  Inst 25:   movl    $1, %ecx
  Inst 26:   movq    %rcx, 8(%rsi)
  Inst 27:   movq    %rax, 152(%r12)
  Inst 28:   xorq    %rsi, %rsi
  Inst 29:   load_ext_name u0:1+0, %rax
  Inst 30:   movq    %r13, rsp(0 + virtual offset)
  Inst 31:   movq    %rbx, rsp(8 + virtual offset)
  Inst 32:   movq    %rdi, rsp(16 + virtual offset)
  Inst 33:   movq    %r14, rsp(24 + virtual offset)
      (safepoint: slots [S0, S1, S2, S3] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 34:   call    *%rax
  Inst 35:   movq    rsp(8 + virtual offset), %rbx
  Inst 36:   movq    rsp(0 + virtual offset), %r13
  Inst 37:   movq    rsp(24 + virtual offset), %r14
  Inst 38:   movq    152(%r12), %rsi
  Inst 39:   movq    %rsi, 152(%r12)
  Inst 40:   movq    %rax, %rdi
  Inst 41:   movq    %rbx, %rsi
  Inst 42:   load_ext_name u0:2+0, %rax
  Inst 43:   movq    %rsi, rsp(0 + virtual offset)
  Inst 44:   movq    %r13, rsp(8 + virtual offset)
  Inst 45:   movq    %rdi, rsp(16 + virtual offset)
  Inst 46:   movq    %r14, rsp(24 + virtual offset)
      (safepoint: slots [S0, S1, S2, S3] with EmitState EmitState { virtual_sp_offset: 0, nominal_sp_to_fp: 0, stack_map: None, cur_srcloc: SourceLoc(4294967295) })
  Inst 47:   call    *%rax
  Inst 48:   movq    rsp(8 + virtual offset), %r13
  Inst 49:   movq    rsp(24 + virtual offset), %r14
  Inst 50:   movq    152(%r12), %rdi
  Inst 51:   movq    16(%r13), %rsi
  Inst 52:   movq    %rdi, %rcx
  Inst 53:   addq    $-16, %rcx
  Inst 54:   movq    %r14, -16(%rdi)
  Inst 55:   movq    %rax, -8(%rdi)
  Inst 56:   jmp     label1
Block 1:
  (original IR block: block1)
  (instruction range: 57 .. 68)
  Inst 57:   movq    %rcx, 152(%r12)
  Inst 58:   movl    $2, %edx
  Inst 59:   movq    %rsi, %rax
  Inst 60:   movq    32(%rsp), %r12
  Inst 61:   movq    40(%rsp), %r13
  Inst 62:   movq    48(%rsp), %r14
  Inst 63:   movq    56(%rsp), %rbx
  Inst 64:   addq    $64, %rsp
  Inst 65:   movq    %rbp, %rsp
  Inst 66:   popq    %rbp
  Inst 67:   ret
}}
